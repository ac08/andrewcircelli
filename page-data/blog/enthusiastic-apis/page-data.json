{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/enthusiastic-apis","result":{"data":{"markdownRemark":{"html":"<p>If you have stick around programming for more than a couple days, you will quickly become familiar with the acronynm - API.</p>\n<p>API, or <strong>A</strong>pplication <strong>P</strong>rogramming <strong>I</strong>nterface is quite possibly my favorite piece of about programming. And when it comes to software, APIs are literally everywhere. But first, what is an <strong>interface</strong>? Well in the software world, an interface is an endpoint of an application that an end-user can interact with.</p>\n<p>And so, then what is a <strong>Programming Interface</strong>? This is simply the method by which different programs interact with each another. Whether that is to access an underlying data source, or to \"add specific functionality to an application, without having to write all of the code themselves\" - <strong>RapidAPI</strong></p>\n<blockquote>\n<p>APIs go hand in hand with one of the most fundamental concepts in computer science: abstraction. Abstraction is just a way of organizing the complexity of a system so that complicated actions can be handled in a simple way. <strong>infoworld</strong></p>\n</blockquote>\n<p>As you are aware, there are many types of API interactions and they serve many functions. And to make this interaction easier, protocols have been put in place.</p>\n<p>But if you are here, you know all about that. I want to use this post to illustrate <em>some</em> of the ways I implement these interfaces in my code.</p>\n<p>Table of Contents</p>\n<ul>\n<li><a href=\"#HTTP-Methods-used-in-REST-APIs\">HTTP Methods used in REST APIs</a></li>\n<li><a href=\"#Lets-Build-on-That\">Let's Build on That</a></li>\n<li><a href=\"#My-New-Obsession-is-GraphQL\">My New Obsession is GraphQL</a></li>\n</ul>\n<h2 id=\"HTTP-Methods-used-in-REST-APIs\" style=\"position:relative;\"><a href=\"#HTTP-Methods-used-in-REST-APIs\" aria-label=\"HTTP Methods used in REST APIs permalink\" class=\"gatsby-remark-autolink before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>HTTP Methods used in REST APIs</h2>\n<p>REST APIs and their associated HTTP methods are universal. And because of this, there are many solutions or techniques used to abstract away some of the boilerplate - axios (Node.js) or ajax.</p>\n<p>Let's check out an example from one of my earlier projects, <em>CreativeOdds</em>:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token comment\">// CreativeOdds repo - logic.js</span>\n<span class=\"token comment\">// ajaxCall to bettingFuturesMarketURL to retrieve World Series 2020 Odds by Team and append them dynamically to the page</span>\n    $<span class=\"token punctuation\">.</span><span class=\"token function\">ajax</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        <span class=\"token string\">\"url\"</span><span class=\"token operator\">:</span> bettingFuturesMarketURL<span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"method\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"GET\"</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">done</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Declare Data Response</span>\n        <span class=\"token keyword\">let</span> data <span class=\"token operator\">=</span> response<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// Filter out all betting markets \"World Series Winner\"</span>\n        <span class=\"token keyword\">let</span> bettingMarkets <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span>BettingMarkets<span class=\"token punctuation\">;</span>\n        bettingMarkets<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">bettingMarketEl</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>bettingMarketEl<span class=\"token punctuation\">.</span>BettingBetType<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>bettingMarketEl<span class=\"token punctuation\">.</span>BettingBetType <span class=\"token operator\">===</span> <span class=\"token string\">\"World Series Winner\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    WSBettingMarketArr<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>bettingMarketEl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">return</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// Configure Array for World Series Odds at DraftKings sportsbook (Id=7)</span>\n        <span class=\"token keyword\">let</span> draftKingsWSOddsArr  <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// Loop through Array for World Series Odds and push \"line\" to World Series Odds at DraftKings sportsbook Array (above)</span>\n        <span class=\"token keyword\">let</span> tempArr <span class=\"token operator\">=</span> WSBettingMarketArr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>BettingOutcomes<span class=\"token punctuation\">;</span>\n        tempArr<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">tempEl</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">let</span> sportsBook <span class=\"token operator\">=</span> tempEl<span class=\"token punctuation\">.</span>SportsBook<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sportsBook<span class=\"token punctuation\">.</span>SportsbookID <span class=\"token operator\">===</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                draftKingsWSOddsArr<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>tempEl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// Loop through Array for Worlds Series Odds at DraftKings sportsbook and push teamName and odds to functional array</span>\n        draftKingsWSOddsArr<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">dkWorldSeriesEl</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            worldSeriesOddsArr<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n                teamName<span class=\"token operator\">:</span> dkWorldSeriesEl<span class=\"token punctuation\">.</span>Participant<span class=\"token punctuation\">,</span>\n                odds<span class=\"token operator\">:</span>     dkWorldSeriesEl<span class=\"token punctuation\">.</span>PayoutAmerican\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token punctuation\">]</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>This is pretty introductory stuff here. But it is the basis of learning API management. Here, I send off an ajax (HTML) GET request to a predefined endpoint (Sportsdata.io API). \"With ajax, web applications can send and retrieve data from a server asynchronously without interfering with the display and behavior of the existing page\" <strong>wikipedia</strong></p>\n<p>So when the page loads, it calls out to this endpoint requesting some data from the service's underlying database. And <em>time stops</em> until a response is returned from the API. The returned data is captured in our variable <em>response</em>. And with some niffty JavaScript, I can pin down the fields I am looking for and push them to an array for further processing on the front-end.</p>\n<p>Alright, now let's get just a little more complex. Here is some code my a similar project for accessing NFL Odds, <em>AnyGivenSunday</em>.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token comment\">// AnyGivenSunday repo - logic.js</span>\n<span class=\"token comment\">// getCompletedGames() call</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getCompletedGames</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> $<span class=\"token punctuation\">.</span><span class=\"token function\">ajax</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      url<span class=\"token operator\">:</span>\n        <span class=\"token string\">\"https://api.sportsdata.io/v3/nfl/scores/json/ScoresByWeek/\"</span> <span class=\"token operator\">+</span>\n        <span class=\"token string\">\"2020\"</span> <span class=\"token operator\">+</span>\n        week <span class=\"token operator\">+</span>\n        sportDataApiKey<span class=\"token punctuation\">,</span>\n      method<span class=\"token operator\">:</span> <span class=\"token string\">\"GET\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">const</span> completedGamesResArr <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">getCompletedGames</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> completedGamesDataArr <span class=\"token operator\">=</span> completedGamesResArr<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>\n  <span class=\"token parameter\">gameEl</span> <span class=\"token operator\">=></span> gameEl<span class=\"token punctuation\">.</span>Status <span class=\"token operator\">===</span> <span class=\"token string\">\"Final\"</span>\n<span class=\"token punctuation\">)</span>\ncompletedGamesDataArr<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">completedGameEl</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> scoreCheck <span class=\"token operator\">=</span> completedGameEl<span class=\"token punctuation\">.</span>HomeScore <span class=\"token operator\">></span> completedGameEl<span class=\"token punctuation\">.</span>AwayScore\n  completedGamesArr<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    homeWon<span class=\"token operator\">:</span> scoreCheck<span class=\"token punctuation\">,</span>\n    gameKey<span class=\"token operator\">:</span> completedGameEl<span class=\"token punctuation\">.</span>GameKey<span class=\"token punctuation\">,</span>\n    scoreID<span class=\"token operator\">:</span> completedGameEl<span class=\"token punctuation\">.</span>ScoreID<span class=\"token punctuation\">,</span>\n    homeTeam<span class=\"token operator\">:</span> completedGameEl<span class=\"token punctuation\">.</span>HomeTeam<span class=\"token punctuation\">,</span>\n    homeTeamID<span class=\"token operator\">:</span> completedGameEl<span class=\"token punctuation\">.</span>HomeTeamID<span class=\"token punctuation\">,</span>\n    awayTeam<span class=\"token operator\">:</span> completedGameEl<span class=\"token punctuation\">.</span>AwayTeam<span class=\"token punctuation\">,</span>\n    awayTeamID<span class=\"token operator\">:</span> completedGameEl<span class=\"token punctuation\">.</span>AwayTeamID<span class=\"token punctuation\">,</span>\n    homeScore<span class=\"token operator\">:</span> completedGameEl<span class=\"token punctuation\">.</span>HomeScore<span class=\"token punctuation\">,</span>\n    awayScore<span class=\"token operator\">:</span> completedGameEl<span class=\"token punctuation\">.</span>AwayScore<span class=\"token punctuation\">,</span>\n    channel<span class=\"token operator\">:</span> completedGameEl<span class=\"token punctuation\">.</span>Channel<span class=\"token punctuation\">,</span>\n    forecastLow<span class=\"token operator\">:</span> completedGameEl<span class=\"token punctuation\">.</span>ForecastTempLow<span class=\"token punctuation\">,</span>\n    forecastHigh<span class=\"token operator\">:</span> completedGameEl<span class=\"token punctuation\">.</span>ForecastTempHigh<span class=\"token punctuation\">,</span>\n    forecastDesc<span class=\"token operator\">:</span> completedGameEl<span class=\"token punctuation\">.</span>ForecastDescription<span class=\"token punctuation\">,</span>\n    stadiumName<span class=\"token operator\">:</span> completedGameEl<span class=\"token punctuation\">.</span>StadiumDetails<span class=\"token punctuation\">.</span>Name<span class=\"token punctuation\">,</span>\n    stadiumCity<span class=\"token operator\">:</span> completedGameEl<span class=\"token punctuation\">.</span>StadiumDetails<span class=\"token punctuation\">.</span>City<span class=\"token punctuation\">,</span>\n    stadiumState<span class=\"token operator\">:</span> completedGameEl<span class=\"token punctuation\">.</span>StadiumDetails<span class=\"token punctuation\">.</span>State<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//end getCompletedGames handler</span>\n\n<span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token punctuation\">]</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>This also isn't the most ground breaking code. But it illustrates progress. I implement async await for cleaner code and abstract away my API calls. I also make use of modern JavaScript methods in my data handling.</p>\n<p>The end product is a lean array populated with the completed NFL games for the week. I can then make use of this array on the front-end.</p>\n<h2 id=\"Lets-Build-on-That\" style=\"position:relative;\"><a href=\"#Lets-Build-on-That\" aria-label=\"Lets Build on That permalink\" class=\"gatsby-remark-autolink before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Let's Build on That</h2>\n<p>Outside of the two above projects and some use with other public APIs, most of my interfaces I have built are done so directly between my front-end client and back-end server and database. This is pretty standard in full-stack development and I am excited to share some of the work I have done for my <em>Full Stack Futures</em> project:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-jsx line-numbers\"><code class=\"language-jsx\"><span class=\"token comment\">// Full Stack Futures repo - Home.js</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Home</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>profiles<span class=\"token punctuation\">,</span> setProfiles<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>error<span class=\"token punctuation\">,</span> setError<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>loading<span class=\"token punctuation\">,</span> setLoading<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> profileType <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">useParams</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>profileType <span class=\"token operator\">!==</span> <span class=\"token string\">\"all\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">const</span> apiResults <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/api/profiles/\"</span> <span class=\"token operator\">+</span> profileType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token function\">setProfiles</span><span class=\"token punctuation\">(</span>apiResults<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">setError</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n          console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"from Home\"</span><span class=\"token punctuation\">,</span> profiles<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token function\">setLoading</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">const</span> results <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/api/profiles/all\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token function\">setProfiles</span><span class=\"token punctuation\">(</span>results<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">setError</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">setLoading</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>profileType<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> error<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>loading<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">SpinnerPage</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token punctuation\">]</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Alright, so this is cool. I make use of the useEffect React... API, to call on my own server to retrieve data from my MongoDB database on my backend. I also implement async await, but this time with the proper try, catch syntax. I love it.</p>\n<p>The first API call is to an endpoint I have defined myself, on the Express.js server. And the results are set in <em>state</em>. Errors are also managed in <em>state</em>.</p>\n<p>The one piece I would change, and have begun to do so, is moving the API call out to a custom hook for use in other components. Boom.</p>\n<h2 id=\"My-New-Obsession-is-GraphQL\" style=\"position:relative;\"><a href=\"#My-New-Obsession-is-GraphQL\" aria-label=\"My New Obsession is GraphQL permalink\" class=\"gatsby-remark-autolink before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>My New Obsession is GraphQL</h2>\n<p>If you are on this site, you are enjoying the benefits of Gatsby.js and it's implementation of Facebook's GraphQL spec. I began learning GraphQL following the completion of my full stack development program and I found it be incredible efficient.</p>\n<p>You may have noticed all the data handling I had to do when I returned data from a REST API. It is a good test of your modern JavaScript knowledge and is very practical in many use-cases, but with GraphQL, there is not such thing as \"over-fetching\". In fact, Gatsby.js will not even allow you to do so.</p>\n<p>And if you check out my full code examples in <em>CreativeOdds</em> or <em>AnyGivenSunday</em> you will also take note of the limitations to REST API servers. Specifically, how some response data arrays rely on other; and this waterfall of network requests is not performant (ala under-fetching\").</p>\n<p>GraphQL handles this, and more. And was used on this site to build out my blog as well as many of the components displayed on my Home page. There are many other benefits of GraphQL, but let's jump into the code:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token comment\">/// andrewcircelli.github.io repo - gatsby-node.js</span>\n\n<span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token punctuation\">]</span>\n\nexports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">createPages</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> actions<span class=\"token punctuation\">,</span> graphql <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> createPage <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> actions\n  <span class=\"token keyword\">const</span> blogPostTemplate <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"src/templates/blog-post.js\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">graphql</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n    query {\n      allMarkdownRemark {\n        edges {\n          node {\n            fields {\n              slug\n            }\n          }\n        }\n      }\n    }\n  </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n  res<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>allMarkdownRemark<span class=\"token punctuation\">.</span>edges<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">edge</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">createPage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      component<span class=\"token operator\">:</span> blogPostTemplate<span class=\"token punctuation\">,</span>\n      path<span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">/blog/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>edge<span class=\"token punctuation\">.</span>node<span class=\"token punctuation\">.</span>fields<span class=\"token punctuation\">.</span>slug<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n      context<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        slug<span class=\"token operator\">:</span> edge<span class=\"token punctuation\">.</span>node<span class=\"token punctuation\">.</span>fields<span class=\"token punctuation\">.</span>slug<span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>This is part of the code that makes this blog post possible. The GraphQL query here is called at build-time and with the help of the expansive Gatsby.js plugin library, we can call on all the markdown (.md) files on my site. The query calls only the fields that are needed and in the format we need them. And the result is quite remarkable. And again, with the help of a Gatsby API, we can create pages based on the data in the [...].edges array. That is pretty powerful stuff.</p>\n<p>But what about that cool carousel on the Home page of this site? That also uses a GraphQL query to fetch data:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-jsx line-numbers\"><code class=\"language-jsx\"><span class=\"token comment\">// andrewcircelli.github.io rep - LearningXP.js</span>\n\n<span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">LearningXP</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> smallprojects <span class=\"token operator\">=</span> <span class=\"token function\">useStaticQuery</span><span class=\"token punctuation\">(</span>\n    graphql<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n      query {\n        allSmallprojectsJson {\n          edges {\n            node {\n              id\n              title\n              links {\n                demo\n                src\n              }\n              description\n            }\n          }\n        }\n      }\n    </span><span class=\"token template-punctuation string\">`</span></span>\n  <span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">SmallProjectWrapper</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">BG</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">InnerContent</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Slider</span></span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">...</span><span class=\"token attr-value\">settings</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n          </span><span class=\"token punctuation\">{</span>smallprojects<span class=\"token punctuation\">.</span>allSmallprojectsJson<span class=\"token punctuation\">.</span>edges<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> node <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">SmallProjectCard</span></span> <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>node<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n              </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h3</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>node<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h3</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n              </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">CardText</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>node<span class=\"token punctuation\">.</span>description<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">CardText</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n              </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ProjectLinks</span></span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>smallproject__links<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n                </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Button</span></span> <span class=\"token attr-name\">target</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>__blank<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">as</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>a<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>node<span class=\"token punctuation\">.</span>links<span class=\"token punctuation\">.</span>demo<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n                  Live Demo\n                </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Button</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n                </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">IconButton</span></span>\n                  <span class=\"token attr-name\">label</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>github<span class=\"token punctuation\">\"</span></span>\n                  <span class=\"token attr-name\">href</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>node<span class=\"token punctuation\">.</span>links<span class=\"token punctuation\">.</span>src<span class=\"token punctuation\">}</span></span>\n                  <span class=\"token attr-name\">icon</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"github\"</span><span class=\"token punctuation\">}</span></span>\n                <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n              </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">ProjectLinks</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">SmallProjectCard</span></span><span class=\"token punctuation\">></span></span>\n          <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Slider</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">InnerContent</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">SmallProjectWrapper</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>This time using a GraphQL <em>staticQuery</em> we are able to fetch the data when the component is loaded on the page. Processing first tracks down the static .json file in my content-json folder named <em>smallprojects.js</em>. It then returns only the data elements I have requested, and makes that data available throughout the component scope. In this case, I map through and render a predefined React.js component.</p>\n<p>Wow. GraphQL transforms the way applications are managed. And why I believe it can be a technology of the future. I think I will keep working on this.</p>\n<p>Links and Learning Resources:</p>\n<ul>\n<li><a href=\"https://www.gatsbyjs.com/\">Check out the Future at Gatsby.js</a></li>\n<li><a href=\"https://twitter.com/hashtag/GraphQL\">Twitter #GraphQL</a></li>\n</ul>\n<p>If you made it this far, thank you for reading!</p>","id":"ef14a2f7-ccf7-5d94-9a52-fb1050a22c5d","frontmatter":{"date":"March 20, 2021","title":"Enthusiastic APIs"}}},"pageContext":{"slug":"enthusiastic-apis"}},"staticQueryHashes":[]}