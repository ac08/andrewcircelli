{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/creative-routes","result":{"data":{"markdownRemark":{"html":"<p>Create Read Update Delete (CRUD) operations are a fundamental piece of any backend software. And the most popular backend web application framework for Node.js is undoubtedly Express.js.</p>\n<p>Express.js was introduced to me early on in my coding journey, and I love what I can do with it. So I was excited when I was tasked to create an API to handle frontend data requests for an exciting professional networking application, FullStackFutures.</p>\n<p>I will use this post to walk through what I believe to be a confident backend solution to my application's routing challenge.</p>\n<p>Table of Contents</p>\n<ul>\n<li><a href=\"#My-Express-Server\">My Express Server</a></li>\n<li><a href=\"#Performant-Routing\">Performant Routing</a></li>\n</ul>\n<h2 id=\"My-Express-Server\" style=\"position:relative;\"><a href=\"#My-Express-Server\" aria-label=\"My Express Server permalink\" class=\"gatsby-remark-autolink before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>My Express Server</h2>\n<p>The server is an impressive piece of code. It's wired up to handle multiple tier of routes, some error handling middleware, as well as a live connection to MongoDB.</p>\n<p>Check it out on my GitHub page at the bottom.</p>\n<h2 id=\"Performant-Routing\" style=\"position:relative;\"><a href=\"#Performant-Routing\" aria-label=\"Performant Routing permalink\" class=\"gatsby-remark-autolink before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Performant Routing</h2>\n<p>Backend programming is my strong suit. It requires you to understand how the application works - the architecture, the database, and the application logic responsible for serving datasets to the user.</p>\n<p>The focus of this post is routing. And Express.js provides a sophisticated routing mechanism capable of handling dynamic requests from the client.</p>\n<blockquote>\n<p>Routing is a feature that lets web applications retain webpage states through URLs. - <strong>back4app</strong></p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token comment\">// server.js</span>\n<span class=\"token keyword\">const</span> profileRouter <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./routes/profile-routes\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> authRouter <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./routes/auth-routes\"</span><span class=\"token punctuation\">)</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/api/auth\"</span><span class=\"token punctuation\">,</span> authRouter<span class=\"token punctuation\">)</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/api/profiles\"</span><span class=\"token punctuation\">,</span> profileRouter<span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token comment\">// profile-routes.js</span>\nprofileRouter\n  <span class=\"token punctuation\">.</span><span class=\"token function\">route</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/all\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// GET: get list of all profiles using Promise syntax</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span><span class=\"token function\">isAuthenticated</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      db<span class=\"token punctuation\">.</span>ProfileModel<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> createdOn<span class=\"token operator\">:</span> <span class=\"token string\">\"1\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">profileDocs</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n          res\n            <span class=\"token punctuation\">.</span><span class=\"token function\">header</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Access-Control-Allow-Origin\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"*\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>profileDocs<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n          res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">422</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n            message<span class=\"token operator\">:</span> <span class=\"token string\">\"Error finding the profiles\"</span><span class=\"token punctuation\">,</span>\n            error<span class=\"token operator\">:</span> err<span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"User is authorized to access this route!\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>This is a snippet of code from my FullStackFutures web application. And here I implement a feature of Express.js Routing Mechanism, <em>Route Handlers</em> (<strong>profileRouter</strong>).</p>\n<blockquote>\n<p>A <strong>Route Handler</strong> is code that is looking for a request to a specific incoming URL such as <em>\"/login\"</em> and often a specific HTTP verb such as POST and has specific code for handling that precise URL and verb. - <strong>stack overflow</strong></p>\n</blockquote>\n<p>This route <em>(\"/api/profiles/all\")</em> responds to an API GET request from the client. The API request is calling for the server to not only return all profile documents in the application's MongoDB collection, <em>profiles</em>, but also ensure the user is logged in and authenticated to access this route. Let's swipe up and see the remainder of the profileRouter.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token comment\">// profile-routes.js</span>\nprofileRouter\n  <span class=\"token punctuation\">.</span><span class=\"token function\">route</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/:profileType\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// extend express.request to carry db.\"model\" based on profile type</span>\n  <span class=\"token comment\">// used on any subsequent POST routes to create profile given different schemas</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> profileType <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>params\n    req<span class=\"token punctuation\">.</span>profileType <span class=\"token operator\">=</span> profileType\n    <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>profileType<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">case</span> <span class=\"token string\">\"student\"</span><span class=\"token operator\">:</span>\n        req<span class=\"token punctuation\">.</span>Model <span class=\"token operator\">=</span> db<span class=\"token punctuation\">.</span>StudentModel\n        <span class=\"token keyword\">break</span>\n      <span class=\"token keyword\">case</span> <span class=\"token string\">\"athlete\"</span><span class=\"token operator\">:</span>\n        req<span class=\"token punctuation\">.</span>Model <span class=\"token operator\">=</span> db<span class=\"token punctuation\">.</span>AthleteModel\n        <span class=\"token keyword\">break</span>\n      <span class=\"token keyword\">case</span> <span class=\"token string\">\"cadet\"</span><span class=\"token operator\">:</span>\n        req<span class=\"token punctuation\">.</span>Model <span class=\"token operator\">=</span> db<span class=\"token punctuation\">.</span>CadetModel\n        <span class=\"token keyword\">break</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> profileType <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> req\n    db<span class=\"token punctuation\">.</span>ProfileModel<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> profileType<span class=\"token operator\">:</span> profileType <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> docs</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n      res<span class=\"token punctuation\">.</span><span class=\"token function\">header</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Access-Control-Allow-Origin\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"*\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>docs<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// POST: post, create a new profile document based on req.Model</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span><span class=\"token function\">isAuthenticated</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      req<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>userRef <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>user\n      <span class=\"token keyword\">const</span> dbModel <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">req<span class=\"token punctuation\">.</span>Model</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span>\n      dbModel<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> doc</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n        res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>doc<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>This is where we get creative. The route <em>(\"/api/profiles/:profileType\")</em> integrates a request param (<em>:profileType</em>) and responds to either an API GET or POST request. As soon as the requests connects to the server, the server retreives the request param and passes its value to the request (req) object. This value is can also be attached to the <em>req.locals</em> object, but I preferred to set the variable directly onto the request body. The value will persist for the lifecycle of the request.</p>\n<p>The value of the request param is also thrown into a switch-case statement. The switch-case statement will set another variable on the request.body (<em>req.Model</em>), and this time, it will equate to the a specific data model defined.</p>\n<p>Now that we have set the stage, we can walk through the API GET and POST requests that this route handles. All API GET requests to this route, will return all profile documents in the <em>profiles</em> collection where the <em>profileType</em> is set to the value stored on <em>req.profileType</em> (for more information on this application's database schema see my post <a href=\"/blog/using-mongoose-discriminators\">here</a>.</p>\n<p>Even cooler, when an API POST request is sent to this route, a new profile document will be created based on the model version stored on the request object (<em>req.Model</em>).</p>\n<p>I hope you enjoyed my router design and welcome you to use a similar design in your projects in the future.</p>\n<blockquote>\n<p><a href=\"https://github.com/andrewcircelli/FullStackFutures/\">view my full code on github</a></p>\n</blockquote>\n<p>Links and Learning Resources:</p>\n<ul>\n<li><a href=\"https://expressjs.com/en/guide/routing.html\">Express.js Routing Docs</a></li>\n</ul>\n<p>Thank you for reading!</p>","id":"df803cfe-2880-538a-843d-a636ea1b7060","frontmatter":{"date":"March 14, 2021","title":"Creative Route Handling with Node.js + Express.js"}}},"pageContext":{"slug":"creative-routes"}},"staticQueryHashes":[]}